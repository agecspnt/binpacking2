import numpy as np


def get_pairs_from_order(order, matrix):
    """Convert order list to pairs with connection strength"""
    pairs = []
    for i in range(len(order) - 1):
        node1 = order[i]
        node2 = order[i + 1]
        strength = matrix[node1][node2]
        pairs.append((node1, node2, strength))
    return pairs


def format_pairs(pairs):
    """Format pairs into readable string with connection strengths"""
    result = "Ordered Pairs (node1-node2: strength):\n"
    result += "-" * 40 + "\n"
    for node1, node2, strength in sorted(pairs, key=lambda x: x[2], reverse=True):
        if strength > 0:  # Only show non-zero connections
            result += f"{node1:2d}-{node2:<2d}: {strength:5.1f}\n"
    return result


def arrange_matrix(matrix):
    n = len(matrix)
    adj_matrix = np.array(matrix)

    # Start with the strongest connection
    max_val = np.max(adj_matrix)
    i, j = np.where(adj_matrix == max_val)
    i, j = i[0], j[0]

    ordered_nodes = [i, j]
    remaining_nodes = set(range(n)) - set(ordered_nodes)

    while remaining_nodes:
        max_connection = -1
        best_node = None
        best_position = None

        for node in remaining_nodes:
            connections_start = adj_matrix[node][ordered_nodes[0]]
            connections_end = adj_matrix[node][ordered_nodes[-1]]

            if connections_start > max_connection:
                max_connection = connections_start
                best_node = node
                best_position = 'start'
            if connections_end > max_connection:
                max_connection = connections_end
                best_node = node
                best_position = 'end'

        if best_position == 'start':
            ordered_nodes.insert(0, best_node)
        else:
            ordered_nodes.append(best_node)

        remaining_nodes.remove(best_node)

    return ordered_nodes


# Create the 30x30 matrix from your data
matrix = [
    [0.000, 0.000, 4.000, 0.000, 22.000, 2.000, 1.000, 4.000, 1.000, 55.000, 0.000, 0.000, 0.000, 0.000, 1.000, 1.000,
     0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 81.000, 1.000, 0.000, 0.000, 1.000, 22.000, 2.000, 1.000],
    [0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 1.000, 1.000, 2.000, 0.000, 9.000, 0.000, 0.000, 67.000, 2.000, 0.000,
     1.000, 0.000, 0.000, 0.000, 2.000, 0.000, 0.000, 0.000, 0.000, 20.000, 0.000, 0.000, 0.000, 0.000],
    [4.000, 0.000, 0.000, 68.000, 20.000, 12.000, 0.000, 0.000, 16.000, 2.000, 0.000, 0.000, 0.000, 2.000, 1.000, 2.000,
     1.000, 0.000, 0.000, 0.000, 23.000, 0.000, 0.000, 41.000, 1.000, 1.000, 0.000, 1.000, 3.000, 1.000],
    [0.000, 0.000, 68.000, 0.000, 0.000, 0.000, 22.000, 5.000, 93.000, 1.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000,
     0.000, 0.000, 1.000, 2.000, 1.000, 1.000, 0.000, 0.000, 0.000, 2.000, 0.000, 2.000, 0.000, 1.000],
    [22.000, 1.000, 20.000, 0.000, 0.000, 0.000, 0.000, 13.000, 0.000, 23.000, 0.000, 0.000, 2.000, 1.000, 0.000,
     17.000, 2.000, 1.000, 0.000, 1.000, 0.000, 1.000, 19.000, 0.000, 34.000, 10.000, 1.000, 1.000, 30.000, 1.000],
    [2.000, 0.000, 12.000, 0.000, 0.000, 0.000, 1.000, 12.000, 0.000, 0.000, 0.000, 25.000, 1.000, 0.000, 0.000, 0.000,
     86.000, 0.000, 18.000, 3.000, 0.000, 3.000, 0.000, 1.000, 0.000, 3.000, 20.000, 0.000, 1.000, 11.000],
    [1.000, 1.000, 0.000, 22.000, 0.000, 1.000, 0.000, 1.000, 1.000, 32.000, 0.000, 5.000, 0.000, 0.000, 19.000, 5.000,
     1.000, 5.000, 0.000, 20.000, 0.000, 21.000, 0.000, 42.000, 0.000, 20.000, 1.000, 1.000, 1.000, 0.000],
    [4.000, 1.000, 0.000, 5.000, 13.000, 12.000, 1.000, 0.000, 76.000, 0.000, 1.000, 1.000, 1.000, 0.000, 7.000, 0.000,
     1.000, 0.000, 0.000, 0.000, 1.000, 21.000, 1.000, 51.000, 1.000, 0.000, 0.000, 0.000, 0.000, 2.000],
    [1.000, 2.000, 16.000, 93.000, 0.000, 0.000, 1.000, 76.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
     2.000, 1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 1.000, 0.000, 2.000, 1.000, 2.000, 1.000, 0.000],
    [55.000, 0.000, 2.000, 1.000, 23.000, 0.000, 32.000, 0.000, 0.000, 0.000, 0.000, 0.000, 2.000, 0.000, 30.000,
     19.000, 1.000, 0.000, 0.000, 0.000, 1.000, 1.000, 6.000, 0.000, 1.000, 0.000, 0.000, 22.000, 0.000, 4.000],
    [0.000, 9.000, 0.000, 1.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 53.000, 93.000, 1.000, 1.000,
     1.000, 0.000, 6.000, 0.000, 0.000, 1.000, 0.000, 1.000, 2.000, 30.000, 0.000, 0.000, 0.000, 0.000],
    [0.000, 0.000, 0.000, 0.000, 0.000, 25.000, 5.000, 1.000, 0.000, 0.000, 0.000, 0.000, 18.000, 22.000, 1.000, 2.000,
     1.000, 0.000, 49.000, 1.000, 0.000, 0.000, 0.000, 0.000, 3.000, 45.000, 26.000, 0.000, 0.000, 1.000],
    [0.000, 0.000, 0.000, 0.000, 2.000, 1.000, 0.000, 1.000, 0.000, 2.000, 53.000, 18.000, 0.000, 0.000, 0.000, 0.000,
     1.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 22.000, 0.000, 94.000, 3.000, 1.000, 0.000],
    [0.000, 67.000, 2.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 93.000, 22.000, 0.000, 0.000, 1.000, 0.000,
     1.000, 1.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 2.000, 8.000, 0.000, 1.000, 0.000, 0.000],
    [1.000, 2.000, 1.000, 0.000, 0.000, 0.000, 19.000, 7.000, 0.000, 30.000, 1.000, 1.000, 0.000, 1.000, 0.000, 2.000,
     0.000, 0.000, 0.000, 1.000, 0.000, 23.000, 2.000, 5.000, 0.000, 0.000, 11.000, 0.000, 92.000, 1.000],
    [1.000, 0.000, 2.000, 0.000, 17.000, 0.000, 5.000, 0.000, 0.000, 19.000, 1.000, 2.000, 0.000, 0.000, 2.000, 0.000,
     0.000, 0.000, 1.000, 96.000, 2.000, 0.000, 0.000, 0.000, 22.000, 7.000, 0.000, 1.000, 0.000, 22.000],
    [0.000, 1.000, 1.000, 0.000, 2.000, 86.000, 1.000, 1.000, 2.000, 1.000, 1.000, 1.000, 1.000, 1.000, 0.000, 0.000,
     0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 6.000, 0.000, 2.000, 1.000, 3.000, 0.000, 2.000, 87.000],
    [0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 5.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000,
     0.000, 0.000, 0.000, 0.000, 91.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000],
    [0.000, 0.000, 0.000, 1.000, 0.000, 18.000, 0.000, 0.000, 0.000, 0.000, 6.000, 49.000, 0.000, 1.000, 0.000, 1.000,
     0.000, 0.000, 0.000, 0.000, 0.000, 1.000, 0.000, 0.000, 92.000, 1.000, 5.000, 0.000, 0.000, 25.000],
    [1.000, 0.000, 0.000, 2.000, 1.000, 3.000, 20.000, 0.000, 0.000, 0.000, 0.000, 1.000, 1.000, 0.000, 1.000, 96.000,
     0.000, 0.000, 0.000, 0.000, 49.000, 24.000, 0.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
    [0.000, 2.000, 23.000, 1.000, 0.000, 0.000, 0.000, 1.000, 1.000, 1.000, 0.000, 0.000, 0.000, 0.000, 0.000, 2.000,
     0.000, 91.000, 0.000, 49.000, 0.000, 0.000, 0.000, 29.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000],
    [0.000, 0.000, 0.000, 1.000, 1.000, 3.000, 21.000, 21.000, 0.000, 1.000, 1.000, 0.000, 0.000, 0.000, 23.000, 0.000,
     0.000, 0.000, 1.000, 24.000, 0.000, 0.000, 5.000, 2.000, 0.000, 10.000, 0.000, 85.000, 1.000, 0.000],
    [81.000, 0.000, 0.000, 0.000, 19.000, 0.000, 0.000, 1.000, 0.000, 6.000, 0.000, 0.000, 0.000, 0.000, 2.000, 0.000,
     6.000, 0.000, 0.000, 0.000, 0.000, 5.000, 0.000, 0.000, 14.000, 0.000, 22.000, 7.000, 3.000, 34.000],
    [1.000, 0.000, 41.000, 0.000, 0.000, 1.000, 42.000, 51.000, 1.000, 0.000, 1.000, 0.000, 0.000, 0.000, 5.000, 0.000,
     0.000, 0.000, 0.000, 1.000, 29.000, 2.000, 0.000, 0.000, 1.000, 15.000, 7.000, 0.000, 0.000, 1.000],
    [0.000, 0.000, 1.000, 0.000, 34.000, 0.000, 0.000, 1.000, 0.000, 1.000, 2.000, 3.000, 22.000, 2.000, 0.000, 22.000,
     2.000, 1.000, 92.000, 0.000, 0.000, 0.000, 14.000, 1.000, 0.000, 1.000, 0.000, 1.000, 0.000, 0.000],
    [0.000, 20.000, 1.000, 2.000, 10.000, 3.000, 20.000, 0.000, 2.000, 0.000, 30.000, 45.000, 0.000, 8.000, 0.000,
     7.000, 1.000, 0.000, 1.000, 0.000, 0.000, 10.000, 0.000, 15.000, 1.000, 0.000, 3.000, 1.000, 14.000, 6.000],
    [1.000, 0.000, 0.000, 0.000, 1.000, 20.000, 1.000, 0.000, 1.000, 0.000, 0.000, 26.000, 94.000, 0.000, 11.000, 0.000,
     3.000, 0.000, 5.000, 0.000, 0.000, 0.000, 22.000, 7.000, 0.000, 3.000, 0.000, 3.000, 0.000, 1.000],
    [22.000, 0.000, 1.000, 2.000, 1.000, 0.000, 1.000, 0.000, 2.000, 22.000, 0.000, 0.000, 3.000, 1.000, 0.000, 1.000,
     0.000, 0.000, 0.000, 0.000, 0.000, 85.000, 7.000, 0.000, 1.000, 1.000, 3.000, 0.000, 47.000, 0.000],
    [2.000,0.000,3.000,0.000,30.000,1.000,1.000,0.000,1.000,0.000,0.000,0.000,1.000,0.000,92.000,0.000,2.000,0.000,0.000,0.000,0.000,1.000,3.000,0.000,0.000,14.000,0.000,47.000,0.000,1.000],
    [1.000,0.000,1.000,1.000,1.000,11.000,0.000,2.000,0.000,4.000,0.000,1.000,0.000,0.000,1.000,22.000,87.000,0.000,25.000,0.000,0.000,0.000,34.000,1.000,0.000,6.000,1.000,0.000,1.000,0.000]
]

# Get ordered pairs
order = arrange_matrix(matrix)
pairs = get_pairs_from_order(order, matrix)

# Print results
print("Strongest connections (value > 50):")
print("-" * 40)
for node1, node2, strength in sorted(pairs, key=lambda x: x[2], reverse=True):
    if strength > 50:
        print(f"{node1:2d}-{node2:<2d}: {strength:5.1f}")

print("\nComplete ordered sequence:")
print("-" * 40)
print(" -> ".join(f"{node:2d}" for node in order))

print("\nAll connections in sequence:")
print("-" * 40)
for node1, node2, strength in pairs:
    print(f"{node1:2d}-{node2:<2d}: {strength:5.1f}")

# Save to file
with open('matrix_analysis.txt', 'w') as f:
    f.write("Strongest connections (value > 50):\n")
    f.write("-" * 40 + "\n")
    for node1, node2, strength in sorted(pairs, key=lambda x: x[2], reverse=True):
        if strength > 50:
            f.write(f"{node1:2d}-{node2:<2d}: {strength:5.1f}\n")

    f.write("\nComplete ordered sequence:\n")
    f.write("-" * 40 + "\n")
    f.write(" -> ".join(f"{node:2d}" for node in order) + "\n")

    f.write("\nAll connections in sequence:\n")
    f.write("-" * 40 + "\n")
    for node1, node2, strength in pairs:
        f.write(f"{node1:2d}-{node2:<2d}: {strength:5.1f}\n")